ASSUME DS:DATA SS:STACK CS:CODE
STACK SEGMENT

STACK ENDS
DATA SEGMENT
MSG1 DB 'For Add type   :'1'$'
MSG2 DB 10,13,'For Sub type   :'2'$'
MSG3 DB 10,13,'For Mul type   :'3'$'
MSG4 DB 10,13,'For Div type   :'4'$'
MSG5 DB 10,13,'Choose Any One:$'
MSG6 DB 10,13,10,13,'Enter 1st Number:$'
MSG7 DB 10,13,'Enter 2nd Number:$'
MSG8 DB 10,13,10,13,'The Result is:$' 
MSG  DB 10,13,10,13,'               ***THANK YOU***$'
                           

NUM1 DB ?
NUM2 DB ?
RESULT DB ? 
DATA ENDS
CODE SEGMENT
MAIN PROC
    MOV AX,DATA   ;INITIALIZATION OF DATA SEGMENT
    MOV DS,AX     
    MOV AX,100H   ;INITIALIZATION OF STACK SEGMENT
    MOV SS,AX
    
    LEA DX,MSG1   ;LOAD EFFECTIVE ADDRESS OF MSG1 TO DX
    MOV AH,9                
    INT 21H       ;USING FUNCTION OF 01H OF THE INTERRUPT TYPE 21 
                  ;01H IS AS YOU SAID IS TO READ CHARACTER FROM STANDARD INPUT, WITH ECHO, RESULT IS STORED IN AH      
    LEA DX,MSG2   ;LOAD EFFECTIVE ADDRESS OF MSG2 TO DX
    INT 21H
                     
    MOV AH,9
    LEA DX,MSG3   ;LOAD EFFECTIVE ADDRESS OF MSG3 TO DX
    MOV AH,9
    INT 21H
    
    LEA DX,MSG4   ;LOAD EFFECTIVE ADDRESS OF MSG4 TO DX
    MOV AH,9
    INT 21H 
            
    LEA DX,MSG5   ;LOAD EFFECTIVE ADDRESS OF MSG5 TO DX
    MOV AH,9
    INT 21H 
  
    MOV AH,1
    INT 21H
    MOV BH,AL
    SUB BH,48
    
    CMP BH,1      ;COMPARE THE ENTERED OPTION WITH BH
    JE ADD        ;JUMP TO PROCEDURE ADDRESSED BY USER
    
    CMP BH,2
    JE SUB
     
    CMP BH,3
    JE MUL
    
    CMP BH,4
    JE DIV
   
  ADD:
    LEA DX,MSG6   ;ENTER 1ST NUMBER
    MOV AH,9      ;TRANSFER THE FIRST NUMBER TO AH
    INT 21H 
    
    MOV AH,1
    INT 21H       ;TRANSFER THE SECOND NUMBER TO BL
    MOV BL,AL
    
    LEA DX,MSG7   ;ENTER 2ND NUMBER
    MOV AH,9
    INT 21H 
        
    MOV AH,1
    INT 21H
    MOV CL,AL     
    
    ADD AL,BL     ;ADD THE TWO NUMBERS
    MOV AH,0
    AAA
        
    MOV BX,AX     ;TRANSFER THE ADDITION RESULT TO BX 
    ADD BH,48
    ADD BL,48 
        
    LEA DX,MSG8   ;LOAD THE ADDRESS OF MSG8 TO DX
    MOV AH,9
    INT 21H
        
    MOV AH,2
    MOV DL,BH
    INT 21H
    
    MOV AH,2
    MOV DL,BL
    INT 21H
    
    ;LEA DX,MSG
    ;MOV AH,9
    ;INT 21H 
    
    JMP EXIT_P   ;JUM
       
   SUB:
 
    LEA DX,MSG6  ;ENTER 1ST NUMBER
    MOV AH,9
    INT 21H 
    
    MOV AH,1
    INT 21H
    MOV BL,AL
    
    LEA DX,MSG7    ;ENTER 2ND NUMBER
    MOV AH,9
    INT 21H 
            
    MOV AH,1
    INT 21H
    MOV CL,AL
    
    SUB BL,CL
    ADD BL,48
                
    LEA DX,MSG8
    MOV AH,9
    INT 21H
    
    
    MOV AH,2
    MOV DL,BL
    INT 21H
            
    ;LEA DX,MSG
    ;MOV AH,9
    ;INT 21H
            
    JMP EXIT_P 
                
   MUL:
 
    LEA DX,MSG6
    MOV AH,9
    INT 21H
        
    MOV AH,1
    INT 21H
    SUB AL,30H
    MOV NUM1,AL
        
    LEA DX,MSG7
    MOV AH,9
    INT 21H 
        
    MOV AH,1
    INT 21H
    SUB AL,30H
    MOV NUM2,AL
        
    MUL NUM1
    MOV RESULT,AL
    AAM  
        
    ADD AH,30H
    ADD AL,30H
        
    MOV BX,AX 
        
    LEA DX,MSG8
    MOV AH,9
    INT 21H 
    
    MOV AH,2
    MOV DL,BH
    INT 21H
    
    MOV AH,2
    MOV DL,BL
    INT 21H
    
    ;LEA DX,MSG
    ;MOV AH,9
    ;INT 21H 
        
    JMP EXIT_P  
      
   DIV:
    LEA DX,MSG6
    MOV AH,9
    INT 21H
        
    MOV AH,1
    INT 21H
    SUB AL,30H
    MOV NUM1,AL
        
    LEA DX,MSG7
    MOV AH,9
    INT 21H 
        
    MOV AH,1
    INT 21H
    SUB AL,30H
    MOV NUM2,AL
    
    MOV CL,NUM1
    MOV CH,00
    MOV AX,CX  
    
    DIV NUM2
    MOV RESULT,AL
    MOV AH, 00
    AAD  
        
    ADD AH,30H
    ADD AL,30H
        
    MOV BX,AX 
        
    LEA DX,MSG8
    MOV AH,9
    INT 21H 
    
    MOV AH,2
    MOV DL,BH
    INT 21H
    
    MOV AH,2
    MOV DL,BL
    INT 21H   
    
    ;LEA DX,MSG
    ;MOV AH,9
    ;INT 21H 
    
    JMP EXIT_P
    
    EXIT_P:
    
        LEA DX,MSG
        MOV AH,9
        INT 21H           
        
    EXIT:
    
    MOV AH,4CH
    INT 21H
    MAIN ENDP
END MAIN  
CODE ENDS
